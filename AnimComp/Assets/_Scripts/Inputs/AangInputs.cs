//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Inputs/AangInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AangInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AangInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AangInputs"",
    ""maps"": [
        {
            ""name"": ""AnimatorControls"",
            ""id"": ""0dda57b8-4943-48dd-82c8-a979d32d6df6"",
            ""actions"": [
                {
                    ""name"": ""Trigger1"",
                    ""type"": ""Button"",
                    ""id"": ""4901ce45-1616-4c20-ad1b-642a373091d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger2"",
                    ""type"": ""Button"",
                    ""id"": ""0dc706fd-fcc4-41b0-8686-32897f01cf2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger3"",
                    ""type"": ""Button"",
                    ""id"": ""4e35be28-837d-4278-83da-b7b80243e4df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger4"",
                    ""type"": ""Button"",
                    ""id"": ""79525e4a-dbb6-4a24-8860-dace2ac1b021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e20ff882-b448-432a-9577-74fffa6ba83c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15c8417-6d43-41ff-acb8-278e6b568095"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b00ccd7-cd04-4350-99af-6342469c5509"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29b37571-3b7a-4eb2-a00b-53908ec0309f"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AnimatorControls
        m_AnimatorControls = asset.FindActionMap("AnimatorControls", throwIfNotFound: true);
        m_AnimatorControls_Trigger1 = m_AnimatorControls.FindAction("Trigger1", throwIfNotFound: true);
        m_AnimatorControls_Trigger2 = m_AnimatorControls.FindAction("Trigger2", throwIfNotFound: true);
        m_AnimatorControls_Trigger3 = m_AnimatorControls.FindAction("Trigger3", throwIfNotFound: true);
        m_AnimatorControls_Trigger4 = m_AnimatorControls.FindAction("Trigger4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AnimatorControls
    private readonly InputActionMap m_AnimatorControls;
    private List<IAnimatorControlsActions> m_AnimatorControlsActionsCallbackInterfaces = new List<IAnimatorControlsActions>();
    private readonly InputAction m_AnimatorControls_Trigger1;
    private readonly InputAction m_AnimatorControls_Trigger2;
    private readonly InputAction m_AnimatorControls_Trigger3;
    private readonly InputAction m_AnimatorControls_Trigger4;
    public struct AnimatorControlsActions
    {
        private @AangInputs m_Wrapper;
        public AnimatorControlsActions(@AangInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger1 => m_Wrapper.m_AnimatorControls_Trigger1;
        public InputAction @Trigger2 => m_Wrapper.m_AnimatorControls_Trigger2;
        public InputAction @Trigger3 => m_Wrapper.m_AnimatorControls_Trigger3;
        public InputAction @Trigger4 => m_Wrapper.m_AnimatorControls_Trigger4;
        public InputActionMap Get() { return m_Wrapper.m_AnimatorControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnimatorControlsActions set) { return set.Get(); }
        public void AddCallbacks(IAnimatorControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_AnimatorControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AnimatorControlsActionsCallbackInterfaces.Add(instance);
            @Trigger1.started += instance.OnTrigger1;
            @Trigger1.performed += instance.OnTrigger1;
            @Trigger1.canceled += instance.OnTrigger1;
            @Trigger2.started += instance.OnTrigger2;
            @Trigger2.performed += instance.OnTrigger2;
            @Trigger2.canceled += instance.OnTrigger2;
            @Trigger3.started += instance.OnTrigger3;
            @Trigger3.performed += instance.OnTrigger3;
            @Trigger3.canceled += instance.OnTrigger3;
            @Trigger4.started += instance.OnTrigger4;
            @Trigger4.performed += instance.OnTrigger4;
            @Trigger4.canceled += instance.OnTrigger4;
        }

        private void UnregisterCallbacks(IAnimatorControlsActions instance)
        {
            @Trigger1.started -= instance.OnTrigger1;
            @Trigger1.performed -= instance.OnTrigger1;
            @Trigger1.canceled -= instance.OnTrigger1;
            @Trigger2.started -= instance.OnTrigger2;
            @Trigger2.performed -= instance.OnTrigger2;
            @Trigger2.canceled -= instance.OnTrigger2;
            @Trigger3.started -= instance.OnTrigger3;
            @Trigger3.performed -= instance.OnTrigger3;
            @Trigger3.canceled -= instance.OnTrigger3;
            @Trigger4.started -= instance.OnTrigger4;
            @Trigger4.performed -= instance.OnTrigger4;
            @Trigger4.canceled -= instance.OnTrigger4;
        }

        public void RemoveCallbacks(IAnimatorControlsActions instance)
        {
            if (m_Wrapper.m_AnimatorControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAnimatorControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_AnimatorControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AnimatorControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AnimatorControlsActions @AnimatorControls => new AnimatorControlsActions(this);
    public interface IAnimatorControlsActions
    {
        void OnTrigger1(InputAction.CallbackContext context);
        void OnTrigger2(InputAction.CallbackContext context);
        void OnTrigger3(InputAction.CallbackContext context);
        void OnTrigger4(InputAction.CallbackContext context);
    }
}
